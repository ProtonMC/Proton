plugins {
	id 'fabric-loom' version '0.5-SNAPSHOT'
	id 'maven-publish'
	id 'com.github.johnrengelman.shadow' version '6.0.0'
    id "checkstyle"
}

repositories {
    maven {
        setUrl("https://nexus.dyonb.nl/repository/proton")
    }
	maven { url 'http://server.bbkr.space:8081/artifactory/libs-release' }
	maven {
		name = "Jitpack"
		url = "https://jitpack.io/"
	}
	jcenter()
}

// Not needed, see line 114
/*
* sourceCompatibility = JavaVersion.VERSION_1_8
* targetCompatibility = JavaVersion.VERSION_1_8
*/

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

tasks.remapJar.dependsOn(shadowJar)
// /* tasks.jar.dependsOn(check) */ Reserved for future use
(tasks.remapJar.input as FileSystemLocationProperty<? extends FileSystemLocation>).set(shadowJar.archivePath)

shadowJar {
	relocate 'io.github.classgraph', 'proton.shaded.io.github.classgraph'
	relocate 'nonapi.io.github.classgraph', 'proton.shaded.nonapi.io.github.classgraph'
}

dependencies {
	//to change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation("net.fabricmc.fabric-api:fabric-api:${project.fabric_version}") {
		exclude module: "fabric-biomes-v1"
	}

	// PSA: Some older mods, compiled on Loom 0.2.1, might have outdated Maven POMs.
	// You may need to force-disable transitiveness on them.

    // Mod menu for config screen and stuff
	modApi("io.github.prospector:modmenu:${project.modmenu_version}") {
		exclude(group: "net.fabricmc.fabric-api")
	}

    // For scanning modules
	implementation "io.github.classgraph:classgraph:${project.classgraph_version}"

    // For de/serializing Json5
	modApi "io.github.cottonmc:Jankson-Fabric:${project.jankson_version}"
	include "io.github.cottonmc:Jankson-Fabric:${project.jankson_version}"

    // Configuration API
	implementation("io.github.protonmc:tiny-config:1.0.1")
	include("io.github.protonmc:tiny-config:1.0.1") // irritater
    // https://nexus.dyonb.nl/repository/proton/io/github/protonmc/tiny-config/1.0.1/tiny-config-1.0.1.pom

    // Config screen
	modApi("me.shedaniel.cloth:config-2:${project.clothconfig_version}") {
		exclude(group: "net.fabricmc.fabric-api")
	}
	include "me.shedaniel.cloth:config-2:${project.clothconfig_version}"

	// modRuntime("com.github.dzwdz:translation_helper:0.1.0")

    // Generating Json at runtime
	modImplementation "com.lettuce.fudge:artifice:${project.artifice_version}"
	include "com.lettuce.fudge:artifice:${project.artifice_version}"

    // Jitpack is temporary
    checkstyle("com.github.ProtonMC:proton-checkstyle-checks:v${project.proton_checkstyle_checks_version}")
}

checkstyle {
    toolVersion = "${project.checkstyle_version}"
    config = rootProject.resources.text.fromFile("config/checkstyle/checkstyle.xml")
}

processResources {
	inputs.property "version", project.version

	from(sourceSets.main.resources.srcDirs) {
		include "fabric.mod.json"
		expand "version": project.version
	}

	from(sourceSets.main.resources.srcDirs) {
		exclude "fabric.mod.json"
	}
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
}

// Ensure that compiling with newer Java versions still warns/fails when using classes
// or methods only present in versions newer than 8, so we can safely compile with Java 11
// or 15
tasks.withType(JavaCompile).configureEach {
    def targetVersion = 11
    if (JavaVersion.current().isJava9Compatible()) {
        it.options.release = targetVersion
    } else {
        sourceCompatibility = JavaVersion.toVersion(targetVersion)
        targetCompatibility = JavaVersion.toVersion(targetVersion)
    }
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = "sources"
	from sourceSets.main.allSource
}

jar {
	from "LICENSE"
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			// add all the jars that should be included when publishing to maven
			artifact(remapJar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}

	// select the repositories you want to publish to
	repositories {
		// uncomment to publish to the local maven
		// mavenLocal()
	}
}
